{
  "result": [
    {
      "topic": "Advanced_Topics",
      "questions": [
        {
          "question": "What are structured arrays in NumPy?",
          "options": {
            "A": "Arrays with a fixed size and data type for all elements.",
            "B": "Arrays where each element can have its own data type and can be thought of as a 'record' or 'struct' in C.",
            "C": "Multi-dimensional arrays with a specific organization of sub-arrays.",
            "D": "Arrays that can only store string data types."
          },
          "correct_answer": "B"
        },
        {
          "question": "How do you define the data type for a structured array in NumPy?",
          "options": {
            "A": "Using a list of tuples, where each tuple specifies the name and data type of a field.",
            "B": "By creating a separate 'dtype' array and assigning it to the structured array.",
            "C": "Structured arrays do not require a specific data type definition.",
            "D": "Using a dictionary where keys are field names and values are data types."
          },
          "correct_answer": "A"
        },
        {
          "question": "What are masked arrays in NumPy primarily used for?",
          "options": {
            "A": "For performing bitwise operations on arrays.",
            "B": "For handling arrays with missing or invalid data by associating a boolean mask with the data.",
            "C": "For optimizing numerical computations on large arrays.",
            "D": "For creating arrays with specific patterns or shapes."
          },
          "correct_answer": "B"
        },
        {
          "question": "How is the mask in a NumPy masked array represented?",
          "options": {
            "A": "By using a special 'NaN' (Not a Number) value for missing elements.",
            "B": "By a separate boolean array of the same shape, where `True` indicates a masked (invalid) value.",
            "C": "By assigning a specific data type to represent missing values.",
            "D": "Masked arrays do not use a separate representation for missing values."
          },
          "correct_answer": "B"
        },
        {
          "question": "What is the purpose of NumPy's C-API?",
          "options": {
            "A": "To allow NumPy arrays to be easily converted to C data structures.",
            "B": "To provide a way for C or C++ code to interact with NumPy arrays and use NumPy's functionality.",
            "C": "To optimize Python code that uses NumPy by translating it to C.",
            "D": "To visualize NumPy arrays using C libraries."
          },
          "correct_answer": "B"
        },
        {
          "question": "Which of the following is a benefit of using NumPy's C-API?",
          "options": {
            "A": "It makes Python code run slower but more memory-efficient.",
            "B": "It allows for the creation of custom array iterators and data types in C for performance-critical applications.",
            "C": "It simplifies the process of writing pure Python code for numerical tasks.",
            "D": "It automatically translates existing C/C++ code to Python NumPy."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are universal functions (ufuncs) in NumPy?",
          "options": {
            "A": "Functions that operate on single elements of an array.",
            "B": "Functions implemented in C that perform element-wise operations on NumPy arrays, offering significant speed improvements.",
            "C": "Functions used for creating universal constants in NumPy.",
            "D": "Functions that can operate on arrays of any data type without explicit casting."
          },
          "correct_answer": "B"
        },
        {
          "question": "Which of the following is an example of a NumPy ufunc?",
          "options": {
            "A": "numpy.array()",
            "B": "numpy.reshape()",
            "C": "numpy.sin()",
            "D": "numpy.concatenate()"
          },
          "correct_answer": "C"
        },
        {
          "question": "What is the purpose of the `out` argument in many NumPy ufuncs?",
          "options": {
            "A": "To specify the data type of the output array.",
            "B": "To provide an existing array where the result of the ufunc will be stored, avoiding the creation of a new array.",
            "C": "To define the shape of the output array.",
            "D": "To specify the number of output arrays the ufunc should return."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy broadcasting rules primarily designed to handle efficiently?",
          "options": {
            "A": "Operations between arrays of the exact same shape.",
            "B": "Operations between arrays with compatible shapes without the need for explicit looping or large intermediate arrays.",
            "C": "Operations involving scalar values and arrays.",
            "D": "Both B and C"
          },
          "correct_answer": "D"
        },
        {
          "question": "What are NumPy iterators used for?",
          "options": {
            "A": "To perform element-wise operations on multiple arrays simultaneously.",
            "B": "To provide a flexible way to access all elements of a NumPy array, especially for multi-dimensional arrays, in a controlled manner.",
            "C": "To optimize the speed of mathematical functions in NumPy.",
            "D": "To handle missing data in NumPy arrays."
          },
          "correct_answer": "B"
        },
        {
          "question": "What is the difference between a NumPy view and a copy?",
          "options": {
            "A": "Views are faster to create but consume more memory.",
            "B": "Changes made to a view affect the original array, while changes to a copy do not.",
            "C": "Copies are created using slicing, while views are created using fancy indexing.",
            "D": "There is no functional difference between them."
          },
          "correct_answer": "B"
        },
        {
          "question": "Which of the following operations typically creates a view of a NumPy array?",
          "options": {
            "A": "Using the `copy()` method.",
            "B": "Basic slicing (e.g., `arr[1:5]`).",
            "C": "Fancy indexing (e.g., `arr[[1, 3, 5]]`).",
            "D": "Reshaping an array with a different total number of elements."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy's `einsum` function used for?",
          "options": {
            "A": "Efficiently performing element-wise string operations on arrays.",
            "B": "Evaluating Einstein's summation convention on tensors (multi-dimensional arrays) in a concise way.",
            "C": "Creating identity matrices of arbitrary dimensions.",
            "D": "Handling complex number operations in NumPy."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy memory views?",
          "options": {
            "A": "Copies of NumPy arrays stored in non-contiguous memory locations.",
            "B": "Objects that provide a way to access the internal data of a NumPy array without creating a full copy, especially useful for interacting with other libraries.",
            "C": "Visualizations of how NumPy arrays are stored in memory.",
            "D": "Optimized data structures for very large arrays that don't fit into RAM."
          },
          "correct_answer": "B"
        },
        {
          "question": "What is the purpose of the `order` argument in some NumPy array creation and manipulation functions (e.g., `reshape`, `flatten`)?",
          "options": {
            "A": "To specify the sorting order of elements.",
            "B": "To define the order in which multi-dimensional array elements are read or written to memory ('C' for row-major, 'F' for column-major).",
            "C": "To determine the number of dimensions of the resulting array.",
            "D": "To set the data type of the array."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy's polynomial functions (in `numpy.polynomial`) used for?",
          "options": {
            "A": "Performing symbolic mathematics with polynomials.",
            "B": "Representing and manipulating polynomial equations, including fitting data to polynomials.",
            "C": "Optimizing numerical algorithms using polynomial approximations.",
            "D": "Visualizing polynomial functions."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy's financial functions (in `numpy.financial`) used for?",
          "options": {
            "A": "Analyzing stock market data.",
            "B": "Performing common financial calculations like present value, future value, and internal rate of return.",
            "C": "Converting currencies between different exchange rates.",
            "D": "Optimizing investment portfolios."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy's discrete Fourier transform (DFT) functions (in `numpy.fft`) used for?",
          "options": {
            "A": "Compressing image and audio data.",
            "B": "Analyzing the frequency components of a signal.",
            "C": "Performing fast matrix multiplications.",
            "D": "Generating random numbers with specific frequency distributions."
          },
          "correct_answer": "B"
        },
        {
          "question": "What are NumPy's linear algebra functions (in `numpy.linalg`) used for?",
          "options": {
            "A": "Solving differential equations.",
            "B": "Performing operations like matrix multiplication, finding determinants, eigenvalues, and solving systems of linear equations.",
            "C": "Optimizing machine learning models.",
            "D": "Visualizing high-dimensional data."
          },
          "correct_answer": "B"
        }
      ]
    }
  ]
}
